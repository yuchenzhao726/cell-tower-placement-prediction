spark-shell --deploy-mode client --packages "org.locationtech.geotrellis:geotrellis-spark_2.12:3.1.0"

import geotrellis.raster._
import geotrellis.raster.io.geotiff._
import geotrellis.vector.Extent
import geotrellis.vector.Point

// file path on local filesystem can be used if on spark client
val inputTiff = "bdad_proj/pop_cnt.tif"
   
val inputDataDir = "bdad_proj/training_set_1" // file path on hdfs
val outputDir = "bdad_proj/training_set_2"  // file path on hdfs

val geoTiff: SinglebandGeoTiff = GeoTiffReader.readSingleband(inputTiff)
val tile = geoTiff.tile
val hist = tile.histogramDouble
hist.statistics

// create a rectangle within (42 lat, -71 lon) and (33 lat, -125 lon)
val filterExtent = Extent(-125, 33, -71, 42) 

// filter in valid data in the rectangle
val records = for {
  col <- 0 until tile.cols
  row <- 0 until tile.rows
  latlon = geoTiff.rasterExtent.gridToMap(col, row)
  if filterExtent.contains(Point(latlon._1, latlon._2))
  pop_den = tile.getDouble(col, row)
  if !pop_den.isNaN
} yield {
  (latlon._1, latlon._2, pop_den)
}

val df0 = records.toSeq.toDF("lon", "lat", "pop_den")
df0.createOrReplaceTempView("pop_table_un")

// normalize data between 0 and 1 by x-min/max-min
val df1 = spark.sql("""SELECT lon, lat, pop_den / max_pop_den AS pop_den 
    FROM ( 
        SELECT lon, lat, pop_den, MAX(pop_den) OVER (PARTITION BY (lon, lat)) as max_pop_den 
        FROM pop_table_un 
    ) 
""")
df1.createOrReplaceTempView("pop_table")

// join pop_den into random_places
val df2 = spark.read.parquet(inputDataDir)
df2.createOrReplaceTempView("random_places")

val result = spark.sql("""SELECT random_places.*, AVG(pop_table.pop_den) AS pop_den 
                    FROM random_places 
                    LEFT JOIN pop_table ON pop_table.lon > random_places.lon1 AND pop_table.lon < random_places.lon2 AND pop_table.lat > random_places.lat1 AND pop_table.lat < random_places.lat2 
                    GROUP BY random_places.lon1, random_places.lat1, random_places.lon2, random_places.lat2, random_places.area, random_places.cell_tower_num
""") 

result.write.mode("overwrite").parquet(outputDir)




